(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{889:function(v,_,p){"use strict";p.r(_);var e=p(4),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,p=v._self._c||_;return p("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[p("p",[v._v("1.下面哪个流类属于面向字符的输入流（）选择一项）")]),v._v(" "),p("p",[v._v("A. BufferedWriter")]),v._v(" "),p("p",[v._v("B. FileInputStream")]),v._v(" "),p("p",[v._v("C. ObjectInputStream")]),v._v(" "),p("p",[v._v("D. InputStreamReader")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：A：字符输出的缓冲流。B：字节输入流 C：对象输入流")]),v._v(" "),p("p",[v._v("2.要从文件”file.dat”文件中读出第 10 个字节到变量 c 中，下列哪个正确（）（选")]),v._v(" "),p("p",[v._v("择一项）")]),v._v(" "),p("p",[v._v("A.")]),v._v(" "),p("p",[v._v('FileInputStream in=new FileInputStream("file.dat");')]),v._v(" "),p("p",[v._v("in.skip(9);")]),v._v(" "),p("p",[v._v("int c=in.read();")]),v._v(" "),p("p",[v._v("B.")]),v._v(" "),p("p",[v._v('FileInputStream in=new FileInputStream("file.dat");')]),v._v(" "),p("p",[v._v("in.skip(10);")]),v._v(" "),p("p",[v._v("int c=in.read();")]),v._v(" "),p("p",[v._v("C.")]),v._v(" "),p("p",[v._v('FileInputStream in=new FileInputStream("file.dat");')]),v._v(" "),p("p",[v._v("int c=in.read();")]),v._v(" "),p("p",[v._v("D.")]),v._v(" "),p("p",[v._v('RandomAccessFile in=new RandomAccessFile("file.dat");')]),v._v(" "),p("p",[v._v("in.skip(7);")]),v._v(" "),p("p",[v._v("int c=in.readByte();")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析： skip(long n)该方法中的 n 指的是要跳过的字节数")]),v._v(" "),p("p",[v._v("3.新建一个流对象，下面那个选项的代码是错误的？（）")]),v._v(" "),p("p",[v._v("A. new BufferedWriter(new FileWriter(“a.txt”));")]),v._v(" "),p("p",[v._v("B. new BufferedReader (new FileInputStream(“a.dat”));")]),v._v(" "),p("p",[v._v("C. new GZIPOutputStream(new FileOutputStream(“a.zip”));")]),v._v(" "),p("p",[v._v("D. new ObjectInputStream(new FileInputStream(“a.dat”));")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：BufferedReader 类的参数只能是 Reader 类型的，不能是 InputStream 类型。")]),v._v(" "),p("p",[v._v("4.下面哪个流是面向字符的输入流（）")]),v._v(" "),p("p",[v._v("A. BufferedWriter")]),v._v(" "),p("p",[v._v("B. FileInputStream")]),v._v(" "),p("p",[v._v("C. ObjectInputStream")]),v._v(" "),p("p",[v._v("D. InputStreamReader")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：以 InputStream（输入流）/OutputStream（输出流）为后缀的是字节流；")]),v._v(" "),p("p",[v._v("以 Reader（输入流）/Writer（输出流）为后缀的是字符流。")]),v._v(" "),p("p",[v._v("5.Java 类库中，将信息写入内存的类是（）")]),v._v(" "),p("p",[v._v("A. Java.io.FileOutputStream")]),v._v(" "),p("p",[v._v("B. java.ByteArrayOutputStream")]),v._v(" "),p("p",[v._v("C. java.io.BufferedOutputStream")]),v._v(" "),p("p",[v._v("D. java,.io.DataOutputStream")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析： ACD 都是 io 到文件")]),v._v(" "),p("p",[v._v("6.下面哪个流类属于面向字符的输入流（）")]),v._v(" "),p("p",[v._v("A. BufferedWriter")]),v._v(" "),p("p",[v._v("B. FileInputStream")]),v._v(" "),p("p",[v._v("C. ObjectInputStream")]),v._v(" "),p("p",[v._v("D. InputStreamReader")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("解析：A 是缓冲流，B 是字节流，C 对象")]),v._v(" "),p("p",[v._v("7.ArrayList 类的底层数据结构是( )")]),v._v(" "),p("p",[v._v("A、数组结构")]),v._v(" "),p("p",[v._v("B、链表结构")]),v._v(" "),p("p",[v._v("C、哈希表结构")]),v._v(" "),p("p",[v._v("D、红黑树结构")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：ArrayList 底层是数组实现的。A 符合")]),v._v(" "),p("p",[v._v("8.LinkedList 类的特点是( )")]),v._v(" "),p("p",[v._v("A、查询快")]),v._v(" "),p("p",[v._v("B、增删快")]),v._v(" "),p("p",[v._v("C、元素不重复")]),v._v(" "),p("p",[v._v("D、元素自然排序")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("解析：LinkedList 底层是是链表实现的所以解析快")]),v._v(" "),p("p",[v._v("9.Vector类的特点是( )")]),v._v(" "),p("p",[v._v("A、线程同步")]),v._v(" "),p("p",[v._v("B、线程不同步")]),v._v(" "),p("p",[v._v("C、增删快")]),v._v(" "),p("p",[v._v("D、底层是链表结构")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：Vector 是线程安全，所以线程是同步的")]),v._v(" "),p("p",[v._v("10.关于迭代器说法错误的是()")]),v._v(" "),p("p",[v._v("A、迭代器是取出集合元素的方式")]),v._v(" "),p("p",[v._v("B、迭代器的 hasNext()方法返回值是布尔类型")]),v._v(" "),p("p",[v._v("C、List 集合有特有迭代器")]),v._v(" "),p("p",[v._v("D、next()方法将返回集合中的上一个元素.")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：next()方法取出元素结合")]),v._v(" "),p("p",[v._v("11.实现下列哪个接口，可以启用比较功能( )")]),v._v(" "),p("p",[v._v("A、Runnable 接口")]),v._v(" "),p("p",[v._v("B、Iterator 接口")]),v._v(" "),p("p",[v._v("C、Serializable 接口")]),v._v(" "),p("p",[v._v("D、Comparator 接口")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析:只有 Comparator 可以做比较")]),v._v(" "),p("p",[v._v("12.下面代码运行的结果是( )")]),v._v(" "),p("p",[v._v("ArrayList"),p("String",[v._v(" al = newArrayList"),p("String",[v._v("();")])],1)],1),v._v(" "),p("p",[v._v("al.add(true);")]),v._v(" "),p("p",[v._v("al.add(123);")]),v._v(" "),p("p",[v._v("al.add(“abc”);")]),v._v(" "),p("p",[v._v("System.out.println(al);")]),v._v(" "),p("p",[v._v("A、编译失败")]),v._v(" "),p("p",[v._v("B、[true,123]")]),v._v(" "),p("p",[v._v("C、[true,123,abc];")]),v._v(" "),p("p",[v._v("D、[abc];")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：new 和 ArrayList 没有分开")]),v._v(" "),p("p",[v._v("13.ArrayList 和 Vector 的区别说法正确的是( )")]),v._v(" "),p("p",[v._v("A、ArrayList 是线程安全的，Vector 是线程不安全")]),v._v(" "),p("p",[v._v("B、ArrayList 是线程不安全的，Vector 是线程安全的")]),v._v(" "),p("p",[v._v("C、ArrayList 底层是数组结构，Vector 底层是链表结构")]),v._v(" "),p("p",[v._v("D、ArrayList 底层是链表结构，Vector 底层是数组结构")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：ArrayList 是数组实现的，线程不安全")]),v._v(" "),p("p",[v._v("14.对于 HashMap 集合说法正确的是(")]),v._v(" "),p("p",[v._v("A、底层是数组结构")]),v._v(" "),p("p",[v._v(")")]),v._v(" "),p("p",[v._v("B、底层是链表结构")]),v._v(" "),p("p",[v._v("C、可以存储 null 值和 null 键")]),v._v(" "),p("p",[v._v("D、不可以存储 null 值和 null 键")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("C:HashMap 的键值可以同时为空")]),v._v(" "),p("p",[v._v("15.下面类或者接口中，不属于集合体系的是(")]),v._v(" "),p("p",[v._v("A、java.util.Collections")]),v._v(" "),p("p",[v._v("B、java.util.Map")]),v._v(" "),p("p",[v._v(")")]),v._v(" "),p("p",[v._v("C、java.util.Vector")]),v._v(" "),p("p",[v._v("D、java.util.Hashtable")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：Map 不属于集合体系")]),v._v(" "),p("p",[v._v("16、如果在排序过程中，每次均将一个待排序的记录按关键字大小 加入到前面")]),v._v(" "),p("p",[v._v("已经有序的中的适当位置，则该排序方法称为（ ）")]),v._v(" "),p("p",[v._v("A、插入排序")]),v._v(" "),p("p",[v._v("B、归并排序")]),v._v(" "),p("p",[v._v("C、冒泡排序")]),v._v(" "),p("p",[v._v("D、堆排序")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：冒泡是两两比较，C 符合答案")]),v._v(" "),p("p",[v._v("17.以下能以键_值对的方式存储对象的接口是(")]),v._v(" "),p("p",[v._v("A、java.util.Collection")]),v._v(" "),p("p",[v._v(")")]),v._v(" "),p("p",[v._v("B、java.util.Map")]),v._v(" "),p("p",[v._v("C、java.util.HashMap")]),v._v(" "),p("p",[v._v("D、java.util.Set")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：HashMap 的接口是 map")]),v._v(" "),p("p",[v._v("18.在 Java 中，( )类可用于创建链表数据结构的对象。")]),v._v(" "),p("p",[v._v("A、LinkedList")]),v._v(" "),p("p",[v._v("B、ArrayList")]),v._v(" "),p("p",[v._v("C、Collection")]),v._v(" "),p("p",[v._v("D、HashMap")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：LinkedList 底层是链表实现的")]),v._v(" "),p("p",[v._v("19.将集合转成数组的方法是( )")]),v._v(" "),p("p",[v._v("A、asList()")]),v._v(" "),p("p",[v._v("B、toCharArray()")]),v._v(" "),p("p",[v._v("C、toArray()")]),v._v(" "),p("p",[v._v("D、copy()")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：toArray 是把集合转换成数组")]),v._v(" "),p("p",[v._v("20.使用 TreeSet 的无参构造创建集合对象存储元素时，该元素必须 ( )")]),v._v(" "),p("p",[v._v("A、实现 Comparable 接口")]),v._v(" "),p("p",[v._v("B、有 main 方法")]),v._v(" "),p("p",[v._v("C、有 get 和 set 方法")]),v._v(" "),p("p",[v._v("D、实现 Serializable 接口")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：实现 Comparable 接口重写 CompareTo 方法")]),v._v(" "),p("p",[v._v("21.在 JAVA 中，LinkedList 类和 ArrayList 类同属于集合框架类，下列（ ）选项中")]),v._v(" "),p("p",[v._v("的方法是 LinkedList 类有而 ArrayList 类没有的。")]),v._v(" "),p("p",[v._v("A、 add(Object o)")]),v._v(" "),p("p",[v._v("B、 add(int indexObject o)")]),v._v(" "),p("p",[v._v("C、 remove(Object o)")]),v._v(" "),p("p",[v._v("D、 removeLast()")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：removeLast 在 ArrayList 没有该方法")]),v._v(" "),p("p",[v._v("22.在 JAVA中 ArrayList 类实现了可变大小的数组，便于遍历元素和随机访问元素，")]),v._v(" "),p("p",[v._v("已知获得了 ArrayList 类的对象 bookTypeList，则下列语句中能够实现判断列表中")]),v._v(" "),p("p",[v._v("是否存在字符串“小说”的是（ ）。")]),v._v(" "),p("p",[v._v('A、 bookTypeList.add("小说");')]),v._v(" "),p("p",[v._v('B、 bookTypeList.get("小说");')]),v._v(" "),p("p",[v._v('C、 bookTypeList.contains("小说");')]),v._v(" "),p("p",[v._v('D、 bookTypeList.remove("小说");')]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：contains 方法判断是否包含某个元素")]),v._v(" "),p("p",[v._v("23.下面关于 Collection 和 Collections 的区别正确的是()")]),v._v(" "),p("p",[v._v("A、Collections 是集合顶层接口")]),v._v(" "),p("p",[v._v("B、Collection 是针对 Collections 集合操作的工具类")]),v._v(" "),p("p",[v._v("C、List、Set、Map 都继承自 Collection 接口")]),v._v(" "),p("p",[v._v("D、Collections 是针对 Collection 集合操作的工具类")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：map 不是集合类。")]),v._v(" "),p("p",[v._v("24.关于泛型的说法错误的是( )")]),v._v(" "),p("p",[v._v("A、泛型是 JDK1.5 出现的新特性")]),v._v(" "),p("p",[v._v("B、泛型是一种安全机制")]),v._v(" "),p("p",[v._v("C、使用泛型避免了强制类型转换")]),v._v(" "),p("p",[v._v("D、使用泛型必须进行强制类型转换")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：泛型不必强制转换")]),v._v(" "),p("p",[v._v("25.下列哪种不是 List 集合的遍历方式 ()")]),v._v(" "),p("p",[v._v("A、Iterator 迭代器实现")]),v._v(" "),p("p",[v._v("B、增强 for 循环实现")]),v._v(" "),p("p",[v._v("C、get()和 size()方法结合实现")]),v._v(" "),p("p",[v._v("D、get()和 length()方法结合实现")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：length 是字符串中的方法")]),v._v(" "),p("p",[v._v("26.关于 HashMap 集合说法正确的是()")]),v._v(" "),p("p",[v._v("A、HashMap 集合是单列集合")]),v._v(" "),p("p",[v._v("B、HashMap 集合不允许存储重复键")]),v._v(" "),p("p",[v._v("C、HashMap 集合不允许存储重复值")]),v._v(" "),p("p",[v._v("D、HashMap 集合线程是安全的")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：H 根据 HashMap 的特点可知。")]),v._v(" "),p("p",[v._v("27.import java.io.File;")]),v._v(" "),p("p",[v._v("public class TestFile{")]),v._v(" "),p("p",[v._v("public static void main(String args[]){")]),v._v(" "),p("p",[v._v("File file = new File(“chp13/corejava.txt”);")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("}请选择一个正确答案（ ）")]),v._v(" "),p("p",[v._v("A、txt 文件在系统中被创建")]),v._v(" "),p("p",[v._v("B、在 windows 系统上运行出错，因为路径分隔符不正确")]),v._v(" "),p("p",[v._v("C、txt 文件在系统中没有被创建")]),v._v(" "),p("p",[v._v("D、如果 txt 文件已存在，则抛出一个异常")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("解析：没有调用创建方法")]),v._v(" "),p("p",[v._v("28.关于 JAVA 泛型叙述不正确的是（）")]),v._v(" "),p("p",[v._v("A、泛类参数只能是类类型不能是基本数据类型")]),v._v(" "),p("p",[v._v("B、泛型是 java 中的语法糖，只存在于编译期")]),v._v(" "),p("p",[v._v("C、List"),p("String",[v._v(" 在运行时等价于 List"),p("Integer")],1)],1),v._v(" "),p("p",[v._v("D、运行时泛型避免了类型转换错误")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：泛型类型保持一致")]),v._v(" "),p("p",[v._v("\\29. “先进后出”指的是下面哪种数据结构")]),v._v(" "),p("p",[v._v("A：队列")]),v._v(" "),p("p",[v._v("B：栈")]),v._v(" "),p("p",[v._v("C：单链表")]),v._v(" "),p("p",[v._v("D：循环队列")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：队列是先进先出")]),v._v(" "),p("p",[v._v("\\30. 下列哪个是判断集合是否为空（ A ）")]),v._v(" "),p("p",[v._v("A：isEmpty()")]),v._v(" "),p("p",[v._v("B：clear()")]),v._v(" "),p("p",[v._v("C：length()")]),v._v(" "),p("p",[v._v("D：size()")]),v._v(" "),p("p",[v._v("答案：clear()是清空。Size 是求长度。Length 不是集合方法")]),v._v(" "),p("p",[v._v("31.哪种 Key-Value 存储对象，既能保证线程的同步，又具有高效的并发性能（）。")]),v._v(" "),p("p",[v._v("A、HashMap")]),v._v(" "),p("p",[v._v("B、Hashtable")]),v._v(" "),p("p",[v._v("C、Vector")]),v._v(" "),p("p",[v._v("D、ConcurrentHashMap")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析:ConcurrentHashMap 线程是安全的")]),v._v(" "),p("p",[v._v("32.ArrayList l =new ArrayList(20) 扩充了几次（ ）。")]),v._v(" "),p("p",[v._v("A、0")]),v._v(" "),p("p",[v._v("B、1")]),v._v(" "),p("p",[v._v("C、2")]),v._v(" "),p("p",[v._v("D、3")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：没有扩充")]),v._v(" "),p("p",[v._v("33.下面都属于线程安全的类是( )。")]),v._v(" "),p("p",[v._v("A、ArrayList")]),v._v(" "),p("p",[v._v("B、Vector")]),v._v(" "),p("p",[v._v("C、HashMap")]),v._v(" "),p("p",[v._v("D、LinkedList")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：a.c.d 线程都是不安全的")]),v._v(" "),p("p",[v._v("\\34. 下面哪个流属于面向字符的输出流（）")]),v._v(" "),p("p",[v._v("A：BufferedWriter")]),v._v(" "),p("p",[v._v("B：FileInputStream")]),v._v(" "),p("p",[v._v("C：ObjectInputStream")]),v._v(" "),p("p",[v._v("D：InputStreamReader")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：A 是字符流")]),v._v(" "),p("p",[v._v("\\35. 输入流将数据从文件、标准输入或其他外部输入设备中加载到内存，在 java")]),v._v(" "),p("p",[v._v("中其对应于抽象类（）及其子类。")]),v._v(" "),p("p",[v._v("A：java.io.InputStream")]),v._v(" "),p("p",[v._v("B：java.io.OutputStream")]),v._v(" "),p("p",[v._v("C：java.os.InputStream")]),v._v(" "),p("p",[v._v("D：java.os.OutputStream")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：A 是输入流")]),v._v(" "),p("p",[v._v("\\36. 有如下需求：存储元素，保证元素在集合里没有重复，并且能够按照自然顺")]),v._v(" "),p("p",[v._v("序进行访问，下列选项哪个接口能够满足该功能？")]),v._v(" "),p("p",[v._v("A：java.util.Map")]),v._v(" "),p("p",[v._v("B：java.util.Set")]),v._v(" "),p("p",[v._v("C：java.util.List")]),v._v(" "),p("p",[v._v("D：java.util.SortedSet")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：map,set,list 不能进行自然排序")]),v._v(" "),p("p",[v._v("\\37. 以下 java 程序代码，执行后的结果是（）")]),v._v(" "),p("p",[v._v("java.util.HashMap map=new java.util.HashMap();")]),v._v(" "),p("p",[v._v('map.put("name",null);')]),v._v(" "),p("p",[v._v('map.put("name","Jack");')]),v._v(" "),p("p",[v._v("System.out.println(map.size());")]),v._v(" "),p("p",[v._v("A：0")]),v._v(" "),p("p",[v._v("B：null")]),v._v(" "),p("p",[v._v("C：1")]),v._v(" "),p("p",[v._v("D：2")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：map 键不能重复")]),v._v(" "),p("p",[v._v("\\38. 关于 java.Util.HashSet 说法正确的是（）")]),v._v(" "),p("p",[v._v("A：集合中的元素有序")]),v._v(" "),p("p",[v._v("B：集合被保证为不可变")]),v._v(" "),p("p",[v._v("C：集合中的元素保证唯一性")]),v._v(" "),p("p",[v._v("D：通过唯一的键访问集合中的元素")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：set 的特点可知。")]),v._v(" "),p("p",[v._v("\\39. 欲构造 ArrayList 类的一个实例，此类继承了 List 接口，下列______是正确的？")]),v._v(" "),p("p",[v._v("A：ArrayListmyList=new object();")]),v._v(" "),p("p",[v._v("B：List myList=new ArrayList();")]),v._v(" "),p("p",[v._v("C：ArrayList myList=new List();")]),v._v(" "),p("p",[v._v("D：List myList=new List();")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：ArrayList 实现了 list 接口")]),v._v(" "),p("p",[v._v("\\40. 下列不是继承 Collection 接口的是（）")]),v._v(" "),p("p",[v._v("A：List")]),v._v(" "),p("p",[v._v("B：Set")]),v._v(" "),p("p",[v._v("C：Map")]),v._v(" "),p("p",[v._v("D：Queue")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：a,c,d 都实现了 Collection 接口")]),v._v(" "),p("p",[v._v("\\41. java.io 包的 File 类是()")]),v._v(" "),p("p",[v._v("A：字符流类")]),v._v(" "),p("p",[v._v("B：字节流类")]),v._v(" "),p("p",[v._v("C：对象流类")]),v._v(" "),p("p",[v._v("D：不属于上面三者")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：fiel 是操作文件类")]),v._v(" "),p("p",[v._v("42.下列关于注解说法错误的是（ ）。")]),v._v(" "),p("p",[v._v("A、注解使用@Interface 定义。")]),v._v(" "),p("p",[v._v("B、默认情况下，注解可以修饰的元素包括类、方法、成员变量等。")]),v._v(" "),p("p",[v._v("C、使代码更加干净易读。")]),v._v(" "),p("p",[v._v("D、Java 注解和注释一模一样。")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：根据题意知 D")]),v._v(" "),p("p",[v._v("43.对 Util.ArrayList 描述正确的是（）")]),v._v(" "),p("p",[v._v("A、集合被保证为不可变")]),v._v(" "),p("p",[v._v("B、集合中的元素可按索引访问")]),v._v(" "),p("p",[v._v("C、集合中的元素保证唯一性")]),v._v(" "),p("p",[v._v("D、通过唯一的键访问集合中的元素")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：list 有下标可以根据索引访问")]),v._v(" "),p("p",[v._v("\\44. 获得 Class 类的方法不包括：")]),v._v(" "),p("p",[v._v("A： 使用 Class 类的 forName()静态方法获得与字符串对应的 Class 对象，参数字")]),v._v(" "),p("p",[v._v("符串必须是类或接口的全限定名")]),v._v(" "),p("p",[v._v("B： 调用 Object 类的 getClass()方法来得到 Class 对象")]),v._v(" "),p("p",[v._v("C： 使用“类型名.class”获取该类型对应的 Class 对象")]),v._v(" "),p("p",[v._v("D： 使用“类型名.getClass()”获取该类型对应的 Class 对象")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：根据提议得 C")]),v._v(" "),p("p",[v._v("\\45. 关于反射方法 public T newInstance()说法准确的是：")]),v._v(" "),p("p",[v._v("A：创建此 Class 对象所表示的类的一个新实例。")]),v._v(" "),p("p",[v._v("B：返回此 Class 对象表示的类声明的所有构造方法。")]),v._v(" "),p("p",[v._v("C：返回此 Class 对象表示的类声明的公共构造方法。")]),v._v(" "),p("p",[v._v("D：创建此 Class 对象所表示的类的一个新的属性。")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：根据提议得 A")]),v._v(" "),p("p",[v._v("\\46. 编写线程类，要继承的父类是")]),v._v(" "),p("p",[v._v("A：Object")]),v._v(" "),p("p",[v._v("B：Runnable")]),v._v(" "),p("p",[v._v("C：Thread")]),v._v(" "),p("p",[v._v("D：Serializable")]),v._v(" "),p("p",[v._v("E：Exception")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析:Runnable 是接口")]),v._v(" "),p("p",[v._v("47.以下哪个最准确描述 synchronized 关键字?")]),v._v(" "),p("p",[v._v("A． 允许两线程并行运行，而且互相通信；")]),v._v(" "),p("p",[v._v("B. 保证在某时刻只有一个线程可访问方法或对象；")]),v._v(" "),p("p",[v._v("C. 保证允许两个或更多处理同时开始和结束；")]),v._v(" "),p("p",[v._v("D. 保证两个或更多线程同时开始和结束。")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：synchronized 保证线程安全")]),v._v(" "),p("p",[v._v("48.下列哪一个类实现了线程组?（）")]),v._v(" "),p("p",[v._v("A、java.lang.Objict")]),v._v(" "),p("p",[v._v("B、java.1ang.ThreadGroup")]),v._v(" "),p("p",[v._v("C、Java.1ang.Thread")]),v._v(" "),p("p",[v._v("D、java.1ang.Runnable")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：根据题意得 B")]),v._v(" "),p("p",[v._v("49.下面程序的运行结果（）（选择一项）")]),v._v(" "),p("p",[v._v("public static void main(String[] args) {")]),v._v(" "),p("p",[v._v("Thread t=new Thread(){")]),v._v(" "),p("p",[v._v("public void run(){")]),v._v(" "),p("p",[v._v("pong();")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("};")]),v._v(" "),p("p",[v._v("t.run();")]),v._v(" "),p("p",[v._v('System.out.println("ping");')]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("static void pong(){")]),v._v(" "),p("p",[v._v('System.out.println("pong");')]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("A. pingpong")]),v._v(" "),p("p",[v._v("B. pongping")]),v._v(" "),p("p",[v._v("C. pingpong 和 pongping 都有可能")]),v._v(" "),p("p",[v._v("D. 都不输出")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：启动线程需要调用 start()方法，而 t.run()方法，则是使用对象名.分析：启")]),v._v(" "),p("p",[v._v("动线程需要调用 start()方法，而 t.run()方法，则是使用对象名.")]),v._v(" "),p("p",[v._v("50.下列哪个方法可用于创建一个可运行的类（）")]),v._v(" "),p("p",[v._v("A. public class X implements Runnable{public void run() {……}}")]),v._v(" "),p("p",[v._v("B. public class X extends Thread{public void run() {……}}")]),v._v(" "),p("p",[v._v("C. public class X extends Thread{public int run() {……}}")]),v._v(" "),p("p",[v._v("D. public class X implements Runnable{protected void run() {……}}")]),v._v(" "),p("p",[v._v("答案：AB")]),v._v(" "),p("p",[v._v("分析： 继承 Thread 和实现 Runable 接口")]),v._v(" "),p("p",[v._v("51.在 Java 多线程中，请用下面哪种方式不会使线程进入阻塞状态（）")]),v._v(" "),p("p",[v._v("A. sleep()")]),v._v(" "),p("p",[v._v("B. Suspend()")]),v._v(" "),p("p",[v._v("C. wait()")]),v._v(" "),p("p",[v._v("D. yield()")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：yield 会是线程进入就绪状态")]),v._v(" "),p("p",[v._v("52.关于 sleep()和 wait()，以下描述错误的一项是（）")]),v._v(" "),p("p",[v._v("A. sleep 是线程类（Thread）的方法，wait 是 Object 类的方法")]),v._v(" "),p("p",[v._v("B. Sleep 不释放对象锁，wait 放弃对象锁")]),v._v(" "),p("p",[v._v("C. Sleep 暂停线程、但监控状态任然保持，结束后会自动恢复")]),v._v(" "),p("p",[v._v("D. Wait 后进入等待锁定池，只针对此对象发出 notify 方法后获取对象锁进入运行")]),v._v(" "),p("p",[v._v("状态。")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：针对此对象的 notify 方法后获取对象锁并进入就绪状态，而不是运行状态。")]),v._v(" "),p("p",[v._v("另外针对此对象的 notifyAll 方法后也可能获取对象锁并进入就绪状态，而不是运")]),v._v(" "),p("p",[v._v("行状态")]),v._v(" "),p("p",[v._v("53.以下锁机机制中，不能保证线程安全的是（）")]),v._v(" "),p("p",[v._v("A. Lock")]),v._v(" "),p("p",[v._v("B. Synchronized")]),v._v(" "),p("p",[v._v("C. Volatile")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：a,b 加锁保证线程安全")]),v._v(" "),p("p",[v._v("54.下面所述步骤中，是创建进程做必须的步骤是（）")]),v._v(" "),p("p",[v._v("A. 由调度程序为进程分配 CPU")]),v._v(" "),p("p",[v._v("B. 建立一个进程控制块")]),v._v(" "),p("p",[v._v("C. 为线程分配内存")]),v._v(" "),p("p",[v._v("D. 为进程分配文件描述符")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：创建进程必须建立一个进程块")]),v._v(" "),p("p",[v._v("55.无锁化编程有哪些常见方法？（）")]),v._v(" "),p("p",[v._v("A. 针对计数器，可以使用原子加")]),v._v(" "),p("p",[v._v("B. 只有一个生产者和一个消费者，那么就可以做到免锁访问环形缓冲区（ Ring")]),v._v(" "),p("p",[v._v("Buffer）")]),v._v(" "),p("p",[v._v("C. RCU（Read-Copy-Update），新旧副本切换机制，对于旧副本可以采用延迟释放")]),v._v(" "),p("p",[v._v("的做法")]),v._v(" "),p("p",[v._v("D. CAS（Compare-and-Swap），如无锁栈，无锁队列等待")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：A 这方法虽然不太好，但是常见")]),v._v(" "),p("p",[v._v("B ProducerConsumerQueue 就是这个，到处都是")]),v._v(" "),p("p",[v._v("C linux kernel 里面大量使用")]),v._v(" "),p("p",[v._v("D 本质上其实就是乐观锁，操作起来很困难。。单生产者多消费者或者多生产者")]),v._v(" "),p("p",[v._v("单消费者的情况下比较常见，也不容易遇到 ABA 问题。")]),v._v(" "),p("p",[v._v("56：编写线程要继承的父类是：")]),v._v(" "),p("p",[v._v("A:Object B:Runnable C:Serializable D:Thread")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：Runnable 是实现了线程接口")]),v._v(" "),p("p",[v._v("57：编写线程要继承的接口是：")]),v._v(" "),p("p",[v._v("A:Object B:Runnable C:Serializable D:Thread")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析:Thread 是类")]),v._v(" "),p("p",[v._v("58:什么方法终止一个线程的运行：")]),v._v(" "),p("p",[v._v("A:sleep B:wait C:stop D:join")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析:终止一个线程使用 stop 方法")]),v._v(" "),p("p",[v._v("59.Java 语言中提供了一个▁线程，自动回收动态分配的内存。D")]),v._v(" "),p("p",[v._v("A．异步")]),v._v(" "),p("p",[v._v("B．消费者")]),v._v(" "),p("p",[v._v("C．守护")]),v._v(" "),p("p",[v._v("D．垃圾收集")]),v._v(" "),p("p",[v._v("分析：垃圾回收以后会自动分配内存")]),v._v(" "),p("p",[v._v("60.Java 语言避免了大多数的▁错误。C")]),v._v(" "),p("p",[v._v("A．数组下标越界")]),v._v(" "),p("p",[v._v("B．算术溢出")]),v._v(" "),p("p",[v._v("C．内存泄露")]),v._v(" "),p("p",[v._v("D．非法的方法参数")]),v._v(" "),p("p",[v._v("分析：根据 java 语言特点知 C")]),v._v(" "),p("p",[v._v("61.有三种原因可以导致线程不能运行，它们是▁。A")]),v._v(" "),p("p",[v._v("A．等待")]),v._v(" "),p("p",[v._v("B．启动")]),v._v(" "),p("p",[v._v("C．创建")]),v._v(" "),p("p",[v._v("D．挂起及由于 I/O 操作而阻塞")]),v._v(" "),p("p",[v._v("分析：根据分析得 C")]),v._v(" "),p("p",[v._v("62.当▁方法终止时，能使线程进入死亡状态。A")]),v._v(" "),p("p",[v._v("A．run")]),v._v(" "),p("p",[v._v("B．setPrority")]),v._v(" "),p("p",[v._v("C．Yield")]),v._v(" "),p("p",[v._v("D．Sleep")]),v._v(" "),p("p",[v._v("分析：")]),v._v(" "),p("p",[v._v("B．setPrority//更改线程优先级")]),v._v(" "),p("p",[v._v("C．yield//暂停当前线程的执行 执行其他线程")]),v._v(" "),p("p",[v._v("D．sleep//线程休眠")]),v._v(" "),p("p",[v._v("63 下面那个集合是以键值对方式来存储数据的(A)")]),v._v(" "),p("p",[v._v("A: Map B:ArrayList C:LinkedList D:HashSet")]),v._v(" "),p("p",[v._v("64.用▁方法可以改变线程的优先级。B")]),v._v(" "),p("p",[v._v("A．run")]),v._v(" "),p("p",[v._v("B．setPrority")]),v._v(" "),p("p",[v._v("C．yield")]),v._v(" "),p("p",[v._v("D．Sleep")]),v._v(" "),p("p",[v._v("分析：setPrority 设置线程优先级")]),v._v(" "),p("p",[v._v("65.线程通过▁▁方法可以使具有相同优先级线程获得处理器。C")]),v._v(" "),p("p",[v._v("A．run")]),v._v(" "),p("p",[v._v("B．setPrority")]),v._v(" "),p("p",[v._v("C．yield")]),v._v(" "),p("p",[v._v("D．Sleep")]),v._v(" "),p("p",[v._v("分析:根据题意得 C")]),v._v(" "),p("p",[v._v("66.线程通过▁▁方法可以休眠一段时间，然后恢复运行。D")]),v._v(" "),p("p",[v._v("A．run")]),v._v(" "),p("p",[v._v("B．setPrority")]),v._v(" "),p("p",[v._v("C．yield")]),v._v(" "),p("p",[v._v("D．Sleep")]),v._v(" "),p("p",[v._v("分析：Sleep 睡眠")]),v._v(" "),p("p",[v._v("67.方法 resume( )负责重新开始▁▁线程的执行。D")]),v._v(" "),p("p",[v._v("A．被 stop( )方法停止")]),v._v(" "),p("p",[v._v("B．被 sleep( )方法停止")]),v._v(" "),p("p",[v._v("C．被 wait( )方法停止")]),v._v(" "),p("p",[v._v("D．被 suspend( )方法停止")]),v._v(" "),p("p",[v._v("分析：根据题意得 D")]),v._v(" "),p("p",[v._v("68.▁▁方法可以用来暂时停止当前线程的运行。A")]),v._v(" "),p("p",[v._v("A．stop( )")]),v._v(" "),p("p",[v._v("B．sleep( )")]),v._v(" "),p("p",[v._v("C．wait( )")]),v._v(" "),p("p",[v._v("D．suspend( )")]),v._v(" "),p("p",[v._v("分析:stop 停止线程")]),v._v(" "),p("p",[v._v("\\69. 请问下列哪些类是定义在 java.io 包中的抽象类() A")]),v._v(" "),p("p",[v._v("A. InputStream")]),v._v(" "),p("p",[v._v("B. FileOutputStream")]),v._v(" "),p("p",[v._v("C. PrintStream")]),v._v(" "),p("p",[v._v("D. FileWriter")]),v._v(" "),p("p",[v._v("分析：b,c,d 都不是抽象类")]),v._v(" "),p("p",[v._v("70.Java 语言中提供了一个▁线程，自动回收动态分配的内存。 D")]),v._v(" "),p("p",[v._v("A 异步")]),v._v(" "),p("p",[v._v("B 消费者")]),v._v(" "),p("p",[v._v("C 守护")]),v._v(" "),p("p",[v._v("D 垃圾收集")]),v._v(" "),p("p",[v._v("分析：Java 语言中提供了一个垃圾收集线程，自动回收动态分配的内存")]),v._v(" "),p("p",[v._v("71.当▁方法终止时，能使线程进入死亡状态。A")]),v._v(" "),p("p",[v._v("A run")]),v._v(" "),p("p",[v._v("B setPrority")]),v._v(" "),p("p",[v._v("C yield")]),v._v(" "),p("p",[v._v("D sleep")]),v._v(" "),p("p",[v._v("分析：.当 run 方法终止时，能使线程进入死亡状态")]),v._v(" "),p("p",[v._v("72.用▁▁方法可以改变线程的优先级。 B")]),v._v(" "),p("p",[v._v("A run")]),v._v(" "),p("p",[v._v("B setPrority")]),v._v(" "),p("p",[v._v("C yield")]),v._v(" "),p("p",[v._v("D sleep")]),v._v(" "),p("p",[v._v("分析：用 setPrority 方法可以改变线程的优先级")]),v._v(" "),p("p",[v._v("73.线程通过▁▁方法可以使具有相同优先级线程获得处理器。 C")]),v._v(" "),p("p",[v._v("A run")]),v._v(" "),p("p",[v._v("B setPrority")]),v._v(" "),p("p",[v._v("C yield")]),v._v(" "),p("p",[v._v("D sleep")]),v._v(" "),p("p",[v._v("分析：.线程通过 yield 方法可以使具有相同优先级线程获得处理器")]),v._v(" "),p("p",[v._v("74.线程通过▁▁方法可以休眠一段时间，然后恢复运行。D")]),v._v(" "),p("p",[v._v("A run")]),v._v(" "),p("p",[v._v("B setPrority")]),v._v(" "),p("p",[v._v("C yield")]),v._v(" "),p("p",[v._v("D sleep")]),v._v(" "),p("p",[v._v("分析：线程通过 sleep 方法可以休眠一段时间，然后恢复运行")]),v._v(" "),p("p",[v._v("75.▁▁方法使对象等待队列的第一个线程进入就绪状态。B")]),v._v(" "),p("p",[v._v("A run")]),v._v(" "),p("p",[v._v("B notify")]),v._v(" "),p("p",[v._v("C yield")]),v._v(" "),p("p",[v._v("D sleep")]),v._v(" "),p("p",[v._v("分析：notify 方法使对象等待队列的第一个线程进入就绪状态")]),v._v(" "),p("p",[v._v("76.方法 resume( )负责重新开始▁▁线程的执行。D")]),v._v(" "),p("p",[v._v("A 被 stop( )方法停止")]),v._v(" "),p("p",[v._v("B 被 sleep( )方法停止")]),v._v(" "),p("p",[v._v("C 被 wait( )方法停止")]),v._v(" "),p("p",[v._v("D 被 suspend( )方法停止")]),v._v(" "),p("p",[v._v("分析：被 suppend（）终止的线程被 resume 冲洗开始")]),v._v(" "),p("p",[v._v("77.▁▁方法可以用来暂时停止当前线程的运行。 B")]),v._v(" "),p("p",[v._v("A stop( )")]),v._v(" "),p("p",[v._v("B sleep( )")]),v._v(" "),p("p",[v._v("C run( )")]),v._v(" "),p("p",[v._v("D start()")]),v._v(" "),p("p",[v._v("分析：sleep 线程休眠")]),v._v(" "),p("p",[v._v("78、ArrayList list=new ArrayList(20);中的 list 扩充几次（）")]),v._v(" "),p("p",[v._v("A. 0")]),v._v(" "),p("p",[v._v("B. 1")]),v._v(" "),p("p",[v._v("C. 2")]),v._v(" "),p("p",[v._v("D. 3")]),v._v(" "),p("p",[v._v("答案：A")]),v._v(" "),p("p",[v._v("分析：已经指定了长度, 所以不扩容")]),v._v(" "),p("p",[v._v("79.List、Set、Map 哪个继承自 Collection 接口，一下说法正确的是（）")]),v._v(" "),p("p",[v._v("A. List Map")]),v._v(" "),p("p",[v._v("B. Set Map")]),v._v(" "),p("p",[v._v("C. List Set")]),v._v(" "),p("p",[v._v("D. List Map Set")]),v._v(" "),p("p",[v._v("答案：C")]),v._v(" "),p("p",[v._v("分析：Map 接口继承了 java.lang.Object 类,但没有实现任何接口.")]),v._v(" "),p("p",[v._v("80.以下结构中，哪个具有同步功能（）")]),v._v(" "),p("p",[v._v("A. HashMap")]),v._v(" "),p("p",[v._v("B. ConcurrentHashMap")]),v._v(" "),p("p",[v._v("C. WeakHashMap")]),v._v(" "),p("p",[v._v("D. TreeMap")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：")]),v._v(" "),p("p",[v._v("A，C，D 都线程不安全，B 线程安全，具有同步功能")]),v._v(" "),p("p",[v._v("81.以下结构中，插入性能最高的是（）")]),v._v(" "),p("p",[v._v("A. ArrayList")]),v._v(" "),p("p",[v._v("B. Linkedlist")]),v._v(" "),p("p",[v._v("C. tor")]),v._v(" "),p("p",[v._v("D. Collection")]),v._v(" "),p("p",[v._v("答案：B")]),v._v(" "),p("p",[v._v("分析：Linkedlist 链表实现")]),v._v(" "),p("p",[v._v("数组插入、删除效率差，排除 A")]),v._v(" "),p("p",[v._v("tor 不是 java 里面的数据结构，是一种网络路由技术；因此排除 C")]),v._v(" "),p("p",[v._v("Collection 是集合的接口，不是某种数据结构；因此排除 D")]),v._v(" "),p("p",[v._v("82.以下结构中，哪个最适合当作 stack 使用（）")]),v._v(" "),p("p",[v._v("A. LinkedHashMap")]),v._v(" "),p("p",[v._v("B. LinkedHashSet")]),v._v(" "),p("p",[v._v("C. LinkedList")]),v._v(" "),p("p",[v._v("D.ArrayList")]),v._v(" "),p("p",[v._v("C")]),v._v(" "),p("p",[v._v("分析：")]),v._v(" "),p("p",[v._v("Stack 是先进后出的线性结构；所以链表比较合适；不需要散列表的数据结构")]),v._v(" "),p("p",[v._v("83.下列叙述中正确的是（）")]),v._v(" "),p("p",[v._v("A. 循环队列有队头和队尾两个指针，因此，循环队列是非线性结构")]),v._v(" "),p("p",[v._v("B. 在循环队列中，只需要队头指针就能反映队列中元素的动态变化情况")]),v._v(" "),p("p",[v._v("C. 在循环队列中，只需要队尾指针就能反映队列中元素的动态变化情况")]),v._v(" "),p("p",[v._v("D. 在循环队列中元素的个数是由队头指针和队尾指针共同决定的")]),v._v(" "),p("p",[v._v("答案：D")]),v._v(" "),p("p",[v._v("分析：循环队列中元素的个数是由队首指针和队尾指针共同决定的，元素的动态")]),v._v(" "),p("p",[v._v("变化也是通过队首指针和队尾指针来反映的，当队首等于队尾时，队列为空。")]),v._v(" "),p("p",[v._v("\\84. 方法 resume( )负责重新开始哪个线程的执行？（ ）")]),v._v(" "),p("p",[v._v("A. 被 stop( )方法停止的线程")]),v._v(" "),p("p",[v._v("B. 被 sleep( )方法停止的线程")]),v._v(" "),p("p",[v._v("C. 被 wait( )方法停止")]),v._v(" "),p("p",[v._v("D. 被 suspend( )方法停止")]),v._v(" "),p("p",[v._v("答案: [D;]")]),v._v(" "),p("p",[v._v("分析： 被 suspend( )停止的线程可以通过 resume( )负责重新开始")]),v._v(" "),p("p",[v._v("\\85. 下面哪个不能直接导致一个线程停止执行？（ ）")]),v._v(" "),p("p",[v._v("A. 调用 yield() 方法")]),v._v(" "),p("p",[v._v("B. 在一个对象上调用 wait() 方法")]),v._v(" "),p("p",[v._v("C. 在一个对象上调用 notify () 方法")]),v._v(" "),p("p",[v._v("D. 在一个对象上调用 Interrupt() 方法")]),v._v(" "),p("p",[v._v("答案: [C;]")]),v._v(" "),p("p",[v._v("分析： notify () 通知")]),v._v(" "),p("p",[v._v("\\86. 请看下面未完成的代码")]),v._v(" "),p("p",[v._v("public class Foo implements Runnable {")]),v._v(" "),p("p",[v._v("public void run (Thread t) {")]),v._v(" "),p("p",[v._v('System.out.println("Running.");')]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("public static void main (String[] args) {")]),v._v(" "),p("p",[v._v("new Thread(new Foo()).start();")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("结果是？（ ）")]),v._v(" "),p("p",[v._v("A. 运行时抛出一个异常")]),v._v(" "),p("p",[v._v("B. 程序能够运行，但是没有任何输出")]),v._v(" "),p("p",[v._v("C. 没有实现 Runnable 接口中的方法导致编译错误")]),v._v(" "),p("p",[v._v("D. 程序运行后输出“Running”")]),v._v(" "),p("p",[v._v("答案: [C;]")]),v._v(" "),p("p",[v._v("分析：没有实现 Runnable 接口中的方法导致编译错误")]),v._v(" "),p("p",[v._v("\\87. Java 系统提供了一个自动回收动态分配的内存的线程，它就是（ ）")]),v._v(" "),p("p",[v._v("A. 异步线程")]),v._v(" "),p("p",[v._v("B. 消费者线程")]),v._v(" "),p("p",[v._v("C. 垃圾收集线程")]),v._v(" "),p("p",[v._v("D. 守护线程")]),v._v(" "),p("p",[v._v("答案: [C;]")]),v._v(" "),p("p",[v._v("分析：系统提供了垃圾收集线程")]),v._v(" "),p("p",[v._v("\\88. 有以下程序段：")]),v._v(" "),p("p",[v._v("class MyThread extends Thread {")]),v._v(" "),p("p",[v._v("public static void main(String args[]) {")]),v._v(" "),p("p",[v._v("MyThread t = new MyThread();")]),v._v(" "),p("p",[v._v("MyThread s = new MyThread();")]),v._v(" "),p("p",[v._v("t.start();")]),v._v(" "),p("p",[v._v('System.out.print("one.");')]),v._v(" "),p("p",[v._v("s.start();")]),v._v(" "),p("p",[v._v('System.out.print("two.");')]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("public void run() {")]),v._v(" "),p("p",[v._v('System.out.print("Thread");')]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("则下面正确的选项是（ ）")]),v._v(" "),p("p",[v._v("A. 编译失败")]),v._v(" "),p("p",[v._v("B. 程序运行结果为：")]),v._v(" "),p("p",[v._v("one.Threadtwo.Thread")]),v._v(" "),p("p",[v._v("C. 程序运行结果是：")]),v._v(" "),p("p",[v._v("one.two.ThreaThread")]),v._v(" "),p("p",[v._v("D. 程序运行结果不确定")]),v._v(" "),p("p",[v._v("答案: [D;]")]),v._v(" "),p("p",[v._v("分析：程序运行结果不确定")]),v._v(" "),p("p",[v._v("\\89. 线程通过（ ）方法可以休眠一段时间，然后恢复运行。")]),v._v(" "),p("p",[v._v("A. run")]),v._v(" "),p("p",[v._v("B. setPrority")]),v._v(" "),p("p",[v._v("C. yield")]),v._v(" "),p("p",[v._v("D. sleep")]),v._v(" "),p("p",[v._v("答案: [D]")]),v._v(" "),p("p",[v._v("分析：sleep 休眠")]),v._v(" "),p("p",[v._v("\\90. RandomAccessFile 类的哪个方法可用于从指定流上读取整数？（ ）")]),v._v(" "),p("p",[v._v("A. readInt")]),v._v(" "),p("p",[v._v("B. readLine")]),v._v(" "),p("p",[v._v("C. seek")]),v._v(" "),p("p",[v._v("D. close")]),v._v(" "),p("p",[v._v("答案: [A;]")]),v._v(" "),p("p",[v._v("分析：readInt 读整")]),v._v(" "),p("ol",{attrs:{start:"91"}},[p("li")]),v._v(" "),p("p",[v._v("设系统中已经存在 ASCII 码文件“file.txt”，给定下面程序")]),v._v(" "),p("p",[v._v("import java.io.*;")]),v._v(" "),p("p",[v._v("public class Try2 {")]),v._v(" "),p("p",[v._v("public static void main (String[]args) throws Exception {")]),v._v(" "),p("p",[v._v("try {")]),v._v(" "),p("p",[v._v('File f = new File("file.txt");')]),v._v(" "),p("p",[v._v("FileOutputStream out = new FileOutputStream(f, true);")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("catch (IOException e) {}")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("则结果是（ ）")]),v._v(" "),p("p",[v._v("A. 不能通过编译")]),v._v(" "),p("p",[v._v("B. 程序可以通过编译，运行后文件“file.txt”没有任何改变")]),v._v(" "),p("p",[v._v("C. 程序可以通过编译，运行后文件“file.txt”的长度变为 0")]),v._v(" "),p("p",[v._v("D. 由于文件 f 没有关闭，所以运行程序时会有一个异常产生")]),v._v(" "),p("p",[v._v("答案: [B;]")]),v._v(" "),p("p",[v._v("分析： 运行后文件“file.txt”没有任何改变")]),v._v(" "),p("p",[v._v("\\92. 下面哪个基于 Unicode 字符的输出流？（ ）")]),v._v(" "),p("p",[v._v("A. Reader")]),v._v(" "),p("p",[v._v("B. Writer")]),v._v(" "),p("p",[v._v("C. InputStream")]),v._v(" "),p("p",[v._v("D. OutputStream")]),v._v(" "),p("p",[v._v("答案: [B]")]),v._v(" "),p("p",[v._v("分析：B 是字符输出流")]),v._v(" "),p("ol",{attrs:{start:"93"}},[p("li")]),v._v(" "),p("p",[v._v("关于 Java 流的叙述错误的是（ ）")]),v._v(" "),p("p",[v._v("A. 流是 Java 语言处理 I/O 的方式")]),v._v(" "),p("p",[v._v("B. 从概念上讲，流就是一系列的字节序列或字符序列")]),v._v(" "),p("p",[v._v("C. 引入流的概念的目的是使得在处理不同的数据输入输出时编程更加方便")]),v._v(" "),p("p",[v._v("D. 流是 Java 惟一的非面向对象的语言构成")]),v._v(" "),p("p",[v._v("答案: [D]")]),v._v(" "),p("p",[v._v("分析：流不是 java 唯一的")]),v._v(" "),p("p",[v._v("94.下列说法中错误的一项是（A）")]),v._v(" "),p("p",[v._v("A. 线程就是程序")]),v._v(" "),p("p",[v._v("B.线程是一个程序的单个执行流")]),v._v(" "),p("p",[v._v("c. 多线程是指一个程序的多个执行流")]),v._v(" "),p("p",[v._v("D.多线程用于实现并发。")]),v._v(" "),p("p",[v._v("分析:线程不是程序")]),v._v(" "),p("p",[v._v("\\95. 下列哪个一个操作不能使线程从等待阻塞状态进入对象阻塞状态（D）")]),v._v(" "),p("p",[v._v("A. 等待阴塞状态下的线程被 notify()唤")]),v._v(" "),p("p",[v._v("B. 等待阻塞状态下的纯种被 interrput()中断")]),v._v(" "),p("p",[v._v("C. 等待时间到")]),v._v(" "),p("p",[v._v("D. 等待阻塞状态下的线程调用 wait()方法")]),v._v(" "),p("p",[v._v("分析:wait 可以让线程阻塞")]),v._v(" "),p("p",[v._v("96.下列哪个方法可以使线程从运行状态进入其他阻塞状态（A）")]),v._v(" "),p("p",[v._v("A.sleep B.wait C.yield D.start")]),v._v(" "),p("p",[v._v("分析:A 是睡眠")]),v._v(" "),p("p",[v._v("\\97. 读写原始数据，一般采用什么流？（A ）")]),v._v(" "),p("p",[v._v("A InputStream")]),v._v(" "),p("p",[v._v("B DataInputStream")]),v._v(" "),p("p",[v._v("C ObjectOutputStream")]),v._v(" "),p("p",[v._v("D BufferedInputStream")]),v._v(" "),p("p",[v._v("分析：InputStream 是输入流")]),v._v(" "),p("p",[v._v("\\98. 为了提高读写性能，可以采用什么流？（ D）")]),v._v(" "),p("p",[v._v("A InputStream")]),v._v(" "),p("p",[v._v("B DataInputStream")]),v._v(" "),p("p",[v._v("C ObjectInputStream")]),v._v(" "),p("p",[v._v("D BufferedInputStream")]),v._v(" "),p("p",[v._v("分析：BufferedInputStream 提高了效率")]),v._v(" "),p("p",[v._v("\\99. 能指定字符编码的 I/O 流类型是：（B）")]),v._v(" "),p("p",[v._v("A Reader")]),v._v(" "),p("p",[v._v("B InputStreamReader")]),v._v(" "),p("p",[v._v("C BufferedReader")]),v._v(" "),p("p",[v._v("D Writer")]),v._v(" "),p("p",[v._v("分析：B 可以")]),v._v(" "),p("p",[v._v("\\100. File 类型中定义了什么方法来判断一个文件是否存在？（ D）")]),v._v(" "),p("p",[v._v("A createNewFile")]),v._v(" "),p("p",[v._v("B renameTo")]),v._v(" "),p("p",[v._v("C delete")]),v._v(" "),p("p",[v._v("D exists")]),v._v(" "),p("p",[v._v("分析:d 是判断文件是否存在")]),v._v(" "),p("p",[v._v("\\101. File 类型中定义了什么方法来创建目录？（ D）")]),v._v(" "),p("p",[v._v("A createNewFile")]),v._v(" "),p("p",[v._v("B exists")]),v._v(" "),p("p",[v._v("C isDirectory")]),v._v(" "),p("p",[v._v("D mkdir")]),v._v(" "),p("p",[v._v("分析：d 是创建目录")]),v._v(" "),p("p",[v._v("判断题：")]),v._v(" "),p("p",[v._v("1、Set 集合不是通过键值对的方式来存储对象的。对")]),v._v(" "),p("p",[v._v("分析:map 通过键值对存储对象")]),v._v(" "),p("p",[v._v("2、集合中不能存放基本数据类型，而只能存放引用数据类型。对")]),v._v(" "),p("p",[v._v("分析：泛型参数类型必须是引用类型")]),v._v(" "),p("p",[v._v("3、HashMap 的键和值可以重复。错")]),v._v(" "),p("p",[v._v("分析：HashMap 键不允许重复，值可以重复")]),v._v(" "),p("p",[v._v("3、对象序列化必须要实现 Serializable 接口。对。")]),v._v(" "),p("p",[v._v("分析：对象序列化必须要实现 Serializable 接口")]),v._v(" "),p("p",[v._v("5、ArrayList 和 LinkedList 的接口是 List。对。分析：ArrayList 和 LinkedList 实现了")]),v._v(" "),p("p",[v._v("List 接口")]),v._v(" "),p("p",[v._v("6、线程调用 run 方法就可以运行。错。分析：调用 start 方法启动")]),v._v(" "),p("p",[v._v("7、List 集合存储的数据是无序的。错。分析：list 是有序的")]),v._v(" "),p("p",[v._v("8、Set 集合存储的数据是有序的。错。分析，set 是无序的")]),v._v(" "),p("p",[v._v("9、Map 集合值可以重复。对。Map 值允许重复")]),v._v(" "),p("p",[v._v("10、TreeSet 存储对象时，")]),v._v(" "),p("p",[v._v("该对象必须实现 Comparable 接口，重写 CompareTo比较方法。对。分析。TreeSet")]),v._v(" "),p("p",[v._v("是二叉树方式存储数据，所以必须实现 Comparable 接口，重写 CompareTo 方法")]),v._v(" "),p("p",[v._v("11、字节流可以转换成字符流，字符流也可以转换成字节流。错。")]),v._v(" "),p("p",[v._v("分析：字符流也不能转换成字节流")]),v._v(" "),p("p",[v._v("12、缓冲流可以提高 io 的效率。对。解析：缓冲流可以提高 io 的效率")]),v._v(" "),p("p",[v._v("13、获取 List 集合大小的长度是 length。错。解析：size")]),v._v(" "),p("p",[v._v("14、List 集合数据可以重复。对。分析：List 集合数据可以重复")]),v._v(" "),p("p",[v._v("15、set 存储数据不可以重复。对。分析：set 存储数据不可以重复")]),v._v(" "),p("p",[v._v("16、File 调用 mkdir 创建新的文件。错。解析：调用 creatNewFile()")]),v._v(" "),p("p",[v._v("17、stop 是线程阻塞状态。错。线程结束")]),v._v(" "),p("p",[v._v("18、start 是启动线程。对")]),v._v(" "),p("p",[v._v("分析：start 是启动线程")]),v._v(" "),p("p",[v._v("19、线程继承继承 Thead 类实现 Runnable 接口。对")]),v._v(" "),p("p",[v._v("分析：线程继承继承 Thead 类实现 Runnable 接口")]),v._v(" "),p("p",[v._v("20、线程死锁可以解决。错。分析：死锁不能解决，只能避免。")]),v._v(" "),p("p",[v._v("21、sleep 和 wait 都是线程阻塞状态。对")]),v._v(" "),p("p",[v._v("分析：sleep 和 wait 都是线程阻塞状态")]),v._v(" "),p("p",[v._v("22、sleep 和 wait 都需要被唤醒。错，wait 需要被唤醒，sleep 不需要")]),v._v(" "),p("p",[v._v("23、在 Java 程序运行过程中，至少有一个线程在运行。")]),v._v(" "),p("p",[v._v("对，因为当所有线程都终止时，程序才会终止。")]),v._v(" "),p("p",[v._v("24、调用 Thread 类的 run()方法后，新的线程就会启动。")]),v._v(" "),p("p",[v._v("错，启动线程应当使用 Thread 类的 start()方法。")]),v._v(" "),p("p",[v._v("25、start()方法和 run()方法声明在 Runnable 接口中。")]),v._v(" "),p("p",[v._v("错，start()方法声明在 Thread 类中，run()方法声明在 Runnable 接口中，Thread")]),v._v(" "),p("p",[v._v("实现了 Runnable 接口。")]),v._v(" "),p("p",[v._v("26、多个线程可能会调用同一个实例的方法。")]),v._v(" "),p("p",[v._v("对，这是为什么需要进行多线程设计的原因。")]),v._v(" "),p("p",[v._v("27、多个线程可能会调用 Thread 类的一个实例的方法。")]),v._v(" "),p("p",[v._v("对，Thread 类的实例本质上和其他类并没有不同。")]),v._v(" "),p("p",[v._v("28、Thread.sleep()方法执行后，在指定时间内所有线程都会暂停。")]),v._v(" "),p("p",[v._v("错，暂停的只有调用 sleep()的线程，即当前线程。")]),v._v(" "),p("p",[v._v("29、某个线程运行 synchronized 方法时，其他所有线程都会停止运行。")]),v._v(" "),p("p",[v._v("错，只会导致其他想要这个对象的锁的线程。")]),v._v(" "),p("p",[v._v("30、执行 Thread.sleep()方法后的线程仅在指定时间内待在等待队列中。")]),v._v(" "),p("p",[v._v("错，sleep()方法不会导致线程进入等待队列。")]),v._v(" "),p("p",[v._v("31、wait()方法的调用语句必须写在 synchronized 方法中。")]),v._v(" "),p("p",[v._v("错，还可以写在 synchronized 同步块中，以及它们内部调用的任何方法中，只要")]),v._v(" "),p("p",[v._v("在调用时获得了锁即可。")]),v._v(" "),p("p",[v._v("32、notifyAll()方法是 Object 类的实例方法。")]),v._v(" "),p("p",[v._v("对。分析：wait(),notify(),notifyAll()都是 Object 类的实例方法。")]),v._v(" "),p("p",[v._v("33、如果线程死亡，它便不能运行。（T）解析：如果线程死亡，它便不能运行")]),v._v(" "),p("p",[v._v("34、在 Java 中，高优先级的可运行线程会抢占低优先级线程。（T ）")]),v._v(" "),p("p",[v._v("解析：在 Java 中，高优先级的可运行线程会抢占低优先级线程")]),v._v(" "),p("p",[v._v("35、线程可以用 yield 方法使低优先级的线程运行。（F）")]),v._v(" "),p("p",[v._v("解析：一个线程可以调用 yield 方法使其他线程有机会运行")]),v._v(" "),p("p",[v._v("36、实现线程的方式可以继承 Thread 类实现 Runnable 接口。对")]),v._v(" "),p("p",[v._v("分析：实现线程的方式可以继承 Thread 类实现 Runnable 接口")]),v._v(" "),p("p",[v._v("37、程序开发者必须创建一个线程去管理内存的分配。（T）")]),v._v(" "),p("p",[v._v("分析：程序开发者必须创建一个线程去管理内存的分配。")]),v._v(" "),p("p",[v._v("38、一个线程在调用它的 start 方法，之前，该线程将一直处于出生期。（ T）")]),v._v(" "),p("p",[v._v("分析：一个线程在调用它的 start 方法，之前，该线程将一直处于出生期")]),v._v(" "),p("p",[v._v("39、当调用一个正在进行线程的 stop( )方法时，该线程便会进入休眠状态。（F）")]),v._v(" "),p("p",[v._v("分析：当调用一个正在进行线程的 stop( )方法时，线程会终止")]),v._v(" "),p("p",[v._v("40、一个线程可以调用 yield 方法使其他线程有机会运行。（T）")]),v._v(" "),p("p",[v._v("分析：一个线程可以调用 yield 方法使其他线程有机会运行。")]),v._v(" "),p("p",[v._v("41、 多线程没有安全问题(F)")]),v._v(" "),p("p",[v._v("分析：多线程会造成线程安全问题")]),v._v(" "),p("p",[v._v("42、多线程安全问题的解决方案可以使用 Lock 提供的具体的锁对象操作(T)")]),v._v(" "),p("p",[v._v("分析：多线程安全问题的解决方案可以使用 Lock 提供的具体的锁对象操作")]),v._v(" "),p("p",[v._v("43、 Stop()方法是终止当前线程的一种状态(T)")]),v._v(" "),p("p",[v._v("分析： Stop()方法是终止当前线程的死亡状态。")]),v._v(" "),p("p",[v._v("44、set 可以用普通循环遍历。错。解析：set 没有下标")]),v._v(" "),p("p",[v._v("45、list 可用普通循环遍历。对。解析：list 有下标，所以可以")]),v._v(" "),p("p",[v._v("46、Set 集合是通过键值对的方式来存储对象的。错。解析：map 是通过键值对")]),v._v(" "),p("p",[v._v("存储数据的")]),v._v(" "),p("p",[v._v("47、集合中不能存放基本数据类型，而只能存放引用数据类型。对")]),v._v(" "),p("p",[v._v("分析：对，泛型参数类型只能是引用类型")]),v._v(" "),p("p",[v._v("48、假设文件”a.txt”的长度为 100 字节，那么当正常运行语句”OutputStream")]),v._v(" "),p("p",[v._v("f=new FileOutputStream(new File(“a.txt”));”之后，文件”a.txt”的长度变为 0")]),v._v(" "),p("p",[v._v("字节。（ T ）")]),v._v(" "),p("p",[v._v("解析:因为没有输出东西")]),v._v(" "),p("p",[v._v("49、InutStream 和 OutputStream 属于字符流（ F ）")]),v._v(" "),p("p",[v._v("分析：属于字节流。")]),v._v(" "),p("p",[v._v("50、实现 Serializable 接口的可以被序列化和反序列化。该接口中没有定义抽象方")]),v._v(" "),p("p",[v._v("法，也没有定义常量。（ T ）")]),v._v(" "),p("p",[v._v("分析：实现 Serializable 接口的可以被序列化和反序列化。")]),v._v(" "),p("p",[v._v("51、序列化是指将字节序列转换成 Java 对象，只有实现了 Serializable 接口的类")]),v._v(" "),p("p",[v._v("的对象才可以被序列化。（ F ）")]),v._v(" "),p("p",[v._v("分析：序列化是指对象序列化而不是字节转换成 java 对象")]),v._v(" "),p("p",[v._v("52、ArrayList 和 LinkedList 都实现了 Collecttion 接口。错。解析：实现了list 接口")]),v._v(" "),p("p",[v._v("53、格式化日期可以用 SimpleDateFormat 类。对。")]),v._v(" "),p("p",[v._v("解析。式化日期可以用 SimpleDateFormat 类")]),v._v(" "),p("p",[v._v("54、字符串比较用 equals 方法比较。对。解析。字符串比较用 equals 方法比较")]),v._v(" "),p("p",[v._v("55、RunTimeException 是 Exception 的子类。对。")]),v._v(" "),p("p",[v._v("解析：RunTimeException 是 Exception 的子类")]),v._v(" "),p("p",[v._v("56、用 final 修饰的变量可以修改值。错。解析：不可以改变")]),v._v(" "),p("p",[v._v("57、非静态方法可以在静态方法中使用。错。解析：非静态方法不能在静态方法")]),v._v(" "),p("p",[v._v("中使用")]),v._v(" "),p("p",[v._v("58、非静态方法可以直接通过类名调用。错。解析：非静态方法不能直接通过类")]),v._v(" "),p("p",[v._v("名调用")]),v._v(" "),p("p",[v._v("59、char 的包装列是 Char。错。解析：包装类 chrarcter。")]),v._v(" "),p("p",[v._v("60、集合中泛型的参数类型必须是引用类型。对。")]),v._v(" "),p("p",[v._v("解析：集合中泛型的参数类型必须是引用类型")]),v._v(" "),p("p",[v._v("61、集合的长度可以随意改变。对。解析:集合的长度可以随意改变")]),v._v(" "),p("p",[v._v("62、Map 可以存放 list 对象。对。解析：Map 可以存放 list 对象")]),v._v(" "),p("p",[v._v("63、使用 synchronize 关键字一定可以保证线程安全。错。解析。不能保证线程")]),v._v(" "),p("p",[v._v("安全")]),v._v(" "),p("p",[v._v("64、list 使用 add 方法添加一个元素。对")]),v._v(" "),p("p",[v._v("解析：list 使用 add 方法添加一个元素。")]),v._v(" "),p("p",[v._v("65、list"),p("Integer",[v._v("使用 remove(2)。则删除元素 2。错。解析:删除下标元素是 2 的")])],1),v._v(" "),p("p",[v._v("元素")]),v._v(" "),p("p",[v._v("66、size()方法可以求 list 集合的大小。对。解析size()方法可以求 list 集合的大小")]),v._v(" "),p("p",[v._v("67、list 中 retainAll 求的是交集。对。解析：list 中 retainAll 求的是交集")]),v._v(" "),p("p",[v._v("68、ArrayList 比 LinkedList 增删快。错。解析：ArrayList 比 LinkedList 增删慢")]),v._v(" "),p("p",[v._v("69、ArrayList 比 LinkedList 查询快。对。解析：ArrayList 比 LinkedList 查询慢")]),v._v(" "),p("p",[v._v("70、ArrayList 底层是用数组实现的。对。解析：ArrayList 底层是用数组实现的")]),v._v(" "),p("p",[v._v("71、可以通过反射的方式获取对象的 属性和方法。对。")]),v._v(" "),p("p",[v._v("解析：可以通过反射的方式获取对象的 属性和方法")]),v._v(" "),p("p",[v._v("72、map 存储数据是有序的。错。解析：map 存储数据是无序的。")]),v._v(" "),p("p",[v._v("73、map 的键可以为空。对。解析：map 的键可以为空。")]),v._v(" "),p("p",[v._v("74、map 是通过键值对来存储数据的。对。解析：map 是通过键值对来存储数据")]),v._v(" "),p("p",[v._v("的。")]),v._v(" "),p("p",[v._v("75、map 是通过键获取值的。对。解析：map 是通过键获取值的")]),v._v(" "),p("p",[v._v("76、线程死亡还可以在复活。错。解析:线程死亡以后无法复活。")]),v._v(" "),p("p",[v._v("77、调用 run 方法可以启动线程。错。解析：调用 start 方法启动")]),v._v(" "),p("p",[v._v("78、map 不可以用迭代器遍历。错。解析。可以用迭代器遍历")]),v._v(" "),p("p",[v._v("79、notifyAll 可以唤醒所有的等待睡眠的线程。对。")]),v._v(" "),p("p",[v._v("解析：notifyAll 可以唤醒所有的等待睡眠的线程。")]),v._v(" "),p("p",[v._v("80、ArrayList 线程不是安全的，LinkedLis 线程是安全的。错")]),v._v(" "),p("p",[v._v("解析：两个线程都不安全")]),v._v(" "),p("p",[v._v("81、isEmpty()判断集合是否为空。对。解析：isEmpty()判断集合是否为空")]),v._v(" "),p("p",[v._v("82、clear()判断集合是否为空。错。解析:清空集合的。")]),v._v(" "),p("p",[v._v("83、Map 不允许键重复。对。解析：Map 不允许键重复")]),v._v(" "),p("p",[v._v("84、io 中 InputStream 是一个接口。错。解析：InputStream 是抽象类")]),v._v(" "),p("p",[v._v("85、FileReader 是一个抽象类。错。解析：FileReader 是普通类。")]),v._v(" "),p("p",[v._v("86、BufferedInputStream 提高了字节流的读的效率。对")]),v._v(" "),p("p",[v._v("解析:缓冲流提高了字节流的读的效率.")]),v._v(" "),p("p",[v._v("87、List,set,map 都是 Collection 的子类。错。解析：map 不是 collection 的子类")]),v._v(" "),p("p",[v._v("88、map 通过 keySet 方法获取所有键的集合。对")]),v._v(" "),p("p",[v._v("解析：map 通过 keySet 方法获取所有键的集合。")]),v._v(" "),p("p",[v._v("89、map 键和值都可以为空。对。解析：map 键和值都可以为空")]),v._v(" "),p("p",[v._v("90、Set 可以调用 toArray 方法，把集合转换成数组。对")]),v._v(" "),p("p",[v._v("解析：Set 可以调用 toArray 方法，把集合转换成数组")]),v._v(" "),p("p",[v._v("91、Collections.sort() 可以对 Set 排序。错")]),v._v(" "),p("p",[v._v("解析：Collections.sort() 可以对 list 排序")]),v._v(" "),p("p",[v._v("92、map 可以调用 replace()通过键方法替换值。对")]),v._v(" "),p("p",[v._v("解析：map 可以调用 replace()通过键方法替换值。")]),v._v(" "),p("p",[v._v("93、map 通过 containsKey()方法判断是否包含键。对")]),v._v(" "),p("p",[v._v("解析：map 通过 containsKey()方法判断是否包含键。")]),v._v(" "),p("p",[v._v("94、map 通过 containsValue()方法判断是否包含值。对")]),v._v(" "),p("p",[v._v("解析：map 通过 containsValue()方法判断是否包含值。")]),v._v(" "),p("p",[v._v("95、map 调用 remove()移除元素。对")]),v._v(" "),p("p",[v._v("解析：map 调用 remove()移除元素。")]),v._v(" "),p("p",[v._v("96、可以通过反射创建对象。对")]),v._v(" "),p("p",[v._v("解析：可以通过反射创建对象。")]),v._v(" "),p("p",[v._v("97、对象序列化使用 DataInputStream 读对象。错。解析使用 Object 写对象")]),v._v(" "),p("p",[v._v("98、FileReader 和 FileWriter 都是抽象类。错。解析：两个都普通 java 类")]),v._v(" "),p("p",[v._v("99、InputStream 和 OutputStream 都是抽象类。对。")]),v._v(" "),p("p",[v._v("解析：InputStream 和 OutputStream 都是抽象类。")]),v._v(" "),p("p",[v._v("100、map 通过 add()添加元素。错。解析通过 put 方法")])])}),[],!1,null,null,null);_.default=t.exports}}]);