(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{796:function(t,n,e){"use strict";e.r(n);var s=e(4),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP访问限制等等。")]),t._v(" "),e("p",[t._v("接口定义类：org.springframework.cloud.gateway.filter.GlobalFilter")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public interface GlobalFilter {\n\tMono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain);\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("gateway自带的GlobalFilter实现类有很多，如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/daixiaomao/Images/raw/master/img/2685774-7a9f5d5d1c4361c9.png",alt:"GlobalFilter实现类"}})]),t._v(" "),e("p",[t._v("有转发，路由，负载等相关的GlobalFilter，感兴趣的可以自己去看下源码，了解下。")]),t._v(" "),e("p",[t._v("我们自己如何定义GlobalFilter来实现我们自己的业务逻辑？")]),t._v(" "),e("p",[t._v("给出一个官方文档上的案例：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Configuration\npublic class ExampleConfiguration {\n\tprivate Logger log = LoggerFactory.getLogger(ExampleConfiguration.class);\n\n\t@Bean\n\t@Order(-1)\n\tpublic GlobalFilter a() {\n\t\treturn (exchange, chain) -> {\n\t\t\tlog.info("first pre filter");\n\t\t\treturn chain.filter(exchange).then(Mono.fromRunnable(() -> {\n\t\t\t\tlog.info("third post filter");\n\t\t\t}));\n\t\t};\n\t}\n\n\t@Bean\n\t@Order(0)\n\tpublic GlobalFilter b() {\n\t\treturn (exchange, chain) -> {\n\t\t\tlog.info("second pre filter");\n\t\t\treturn chain.filter(exchange).then(Mono.fromRunnable(() -> {\n\t\t\t\tlog.info("second post filter");\n\t\t\t}));\n\t\t};\n\t}\n\n\t@Bean\n\t@Order(1)\n\tpublic GlobalFilter c() {\n\t\treturn (exchange, chain) -> {\n\t\t\tlog.info("third pre filter");\n\t\t\treturn chain.filter(exchange).then(Mono.fromRunnable(() -> {\n\t\t\t\tlog.info("first post filter");\n\t\t\t}));\n\t\t};\n\t}\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br")])]),e("p",[t._v("上面定义了3个GlobalFilter，通过@Order来指定执行的顺序，数字越小，优先级越高。下面就是输出的日志，从日志就可以看出执行的顺序：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2018-10-14 12:08:52.406  INFO 55062 --- [ioEventLoop-4-1] c.c.gateway.config.ExampleConfiguration  : first pre filter\n2018-10-14 12:08:52.406  INFO 55062 --- [ioEventLoop-4-1] c.c.gateway.config.ExampleConfiguration  : second pre filter\n2018-10-14 12:08:52.407  INFO 55062 --- [ioEventLoop-4-1] c.c.gateway.config.ExampleConfiguration  : third pre filter\n2018-10-14 12:08:52.437  INFO 55062 --- [ctor-http-nio-7] c.c.gateway.config.ExampleConfiguration  : first post filter\n2018-10-14 12:08:52.438  INFO 55062 --- [ctor-http-nio-7] c.c.gateway.config.ExampleConfiguration  : second post filter\n2018-10-14 12:08:52.438  INFO 55062 --- [ctor-http-nio-7] c.c.gateway.config.ExampleConfiguration  : third post filter\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("当GlobalFilter的逻辑比较多时，我还是推荐大家单独写一个GlobalFilter来处理，比如我们要实现对IP的访问限制，不在IP白名单中就不让调用的需求。")]),t._v(" "),e("p",[t._v("单独定义只需要实现GlobalFilter, Ordered这两个接口就可以了。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Component\npublic class IPCheckFilter implements GlobalFilter, Ordered {\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn 0;\n\t}\n\n\t@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\tHttpHeaders headers = exchange.getRequest().getHeaders();\n\t\t// 此处写死了，演示用，实际中需要采取配置的方式\n\t\tif (getIp(headers).equals("127.0.0.1")) {\n\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\tResponseData data = new ResponseData();\n\t\t\tdata.setCode(401);\n\t\t\tdata.setMessage("非法请求");\n\t\t\tbyte[] datas = JsonUtils.toJson(data).getBytes(StandardCharsets.UTF_8);\n\t\t\tDataBuffer buffer = response.bufferFactory().wrap(datas);\n\t\t\tresponse.setStatusCode(HttpStatus.UNAUTHORIZED);\n\t\t\tresponse.getHeaders().add("Content-Type", "application/json;charset=UTF-8");\n\t\t\treturn response.writeWith(Mono.just(buffer));\n\t\t}\n\t\treturn chain.filter(exchange);\n\t}\n\n\t// 这边从请求头中获取用户的实际IP,根据Nginx转发的请求头获取\n\tprivate String getIp(HttpHeaders headers) {\n\t\treturn "127.0.0.1";\n\t}\n\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br")])]),e("p",[t._v("过滤的使用没什么好讲的，都比较简单，作用却很大，可以处理很多需求，上面讲的IP认证拦截只是冰山一角，更多的功能需要我们自己基于过滤器去实现。")]),t._v(" "),e("p",[t._v("比如我想做a/b测试，那么就得在路由转发层面做文章，前面我们有贴一个图片，图片中有很多默认的全局过滤器，其中有一个LoadBalancerClientFilter是负责选择路由服务的负载过滤器，里面会通过loadBalancer去选择转发的服务，然后传递到下面的路由NettyRoutingFilter过滤器去执行，那么我们就可以基于这个机制来实现。")]),t._v(" "),e("p",[t._v("Filter中往下一个Filter中传递数据实用下面的方式：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, requestUrl);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("获取方直接获取：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("URI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("如果我想改变路由的话，就可以这样做：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Component\npublic class DebugFilter implements GlobalFilter, Ordered {\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn 10101;\n\t}\n\n\t@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\ttry {\n\t\t\texchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, new URI("http://192.168.31.245:8081/house/hello2"));\n\t\t} catch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn chain.filter(exchange);\n\t}\n\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br")])]),e("p",[t._v("LoadBalancerClientFilter的order是10100，我们这边比它大1，这样就能在它执行完之后来替换要路由的地址了。")])])}),[],!1,null,null,null);n.default=a.exports}}]);