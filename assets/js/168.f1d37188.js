(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{810:function(s,e,n){"use strict";n.r(e);var a=n(4),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"spring-cloud-stream-使用延迟消息实现定时任务（rabbitmq）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-stream-使用延迟消息实现定时任务（rabbitmq）"}},[s._v("#")]),s._v(" Spring Cloud Stream 使用延迟消息实现定时任务（RabbitMQ）")]),s._v(" "),n("h2",{attrs:{id:"应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),n("p",[s._v("我们在使用一些开源调度系统（比如：elastic-job等）的时候，对于任务的执行时间通常都是有规律性的，可能是每隔半小时执行一次，或者每天凌晨一点执行一次。然而实际业务中还存在另外一种定时任务，它可能需要一些触发条件才开始定时，比如：编写博文时候，设置2小时之后发送。对于这些开始时间不确定的定时任务，我们也可以通过Spring Cloud Stream来很好的处理。")]),s._v(" "),n("p",[s._v("为了实现开始时间不确定的定时任务触发，我们将引入延迟消息的使用。RabbitMQ中提供了关于延迟消息的插件，所以本文就来具体介绍以下如何利用Spring Cloud Stream以及RabbitMQ轻松的处理上述问题。")]),s._v(" "),n("h2",{attrs:{id:"动手试试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动手试试"}},[s._v("#")]),s._v(" 动手试试")]),s._v(" "),n("h3",{attrs:{id:"插件安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插件安装"}},[s._v("#")]),s._v(" 插件安装")]),s._v(" "),n("p",[s._v("关于RabbitMQ延迟消息的插件介绍可以查看官方网站："),n("a",{attrs:{href:"https://www.rabbitmq.com/blog/2015/04/16/scheduling-messages-with-rabbitmq/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.rabbitmq.com/blog/2015/04/16/scheduling-messages-with-rabbitmq/"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("安装方式很简单，只需要在这个页面："),n("a",{attrs:{href:"http://www.rabbitmq.com/community-plugins.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.rabbitmq.com/community-plugins.html"),n("OutboundLink")],1),s._v(" 中找到"),n("code",[s._v("rabbitmq_delayed_message_exchange")]),s._v("插件，根据您使用的RabbitMQ版本选择对应的插件版本下载即可。")]),s._v(" "),n("blockquote",[n("p",[s._v("注意：只有RabbitMQ 3.6.x以上才支持")])]),s._v(" "),n("p",[s._v("在下载好之后，解压得到"),n("code",[s._v(".ez")]),s._v("结尾的插件包，将其复制到RabbitMQ安装目录下的"),n("code",[s._v("plugins")]),s._v("文件夹。")]),s._v(" "),n("p",[s._v("然后通过命令行启用该插件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("rabbitmq-plugins enable rabbitmq_delayed_message_exchange\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://i.loli.net/2019/12/25/VGbLHnSMWraBC69.png",alt:""}})]),s._v(" "),n("p",[n("img",{attrs:{src:"https://i.loli.net/2019/12/25/1adkoyDf9c6EZsO.png",alt:""}})]),s._v(" "),n("p",[s._v("该插件在通过上述命令启用后就可以直接使用，不需要重启。")]),s._v(" "),n("p",[s._v("另外，如果您没有启用该插件，您可能为遇到类似这样的错误：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ERROR 156 --- [ 127.0.0.1:5672] o.s.a.r.c.CachingConnectionFactory : Channel shutdown: connection error; protocol method: #method(reply-code=503, reply-text=COMMAND_INVALID - unknown exchange type 'x-delayed-message', class-id=40, method-id=10)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"应用编码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用编码"}},[s._v("#")]),s._v(" 应用编码")]),s._v(" "),n("p",[s._v("下面通过编写一个简单的例子来具体体会一下这个属性的用法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@EnableBinding(TestApplication.TestTopic.class)\n@SpringBootApplication\npublic class TestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(TestApplication.class, args);\n    }\n\n    @Slf4j\n    @RestController\n    static class TestController {\n\n        @Autowired\n        private TestTopic testTopic;\n\n        /**\n         * 消息生产接口\n         *\n         * @param message\n         * @return\n         */\n        @GetMapping("/sendMessage")\n        public String messageWithMQ(@RequestParam String message) {\n            log.info("Send: " + message);\n            testTopic.output().send(MessageBuilder.withPayload(message).setHeader("x-delay", 5000).build());\n            return "ok";\n        }\n\n    }\n\n    /**\n     * 消息消费逻辑\n     */\n    @Slf4j\n    @Component\n    static class TestListener {\n\n        @StreamListener(TestTopic.INPUT)\n        public void receive(String payload) {\n            log.info("Received: " + payload);\n        }\n\n    }\n\n    interface TestTopic {\n\n        String OUTPUT = "example-topic-output";\n        String INPUT = "example-topic-input";\n\n        @Output(OUTPUT)\n        MessageChannel output();\n\n        @Input(INPUT)\n        SubscribableChannel input();\n\n    }\n\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br")])]),n("p",[s._v("内容很简单，既包含了消息的生产，也包含了消息消费。在"),n("code",[s._v("/sendMessage")]),s._v("接口的定义中，发送了一条消息，一条消息的头信息中包含了"),n("code",[s._v("x-delay")]),s._v("字段，该字段用来指定消息延迟的时间，单位为毫秒。所以上述代码发送的消息会在5秒之后被消费。在消息监听类"),n("code",[s._v("TestListener")]),s._v("中，对"),n("code",[s._v("TestTopic.INPUT")]),s._v("通道定义了"),n("code",[s._v("@StreamListener")]),s._v("，这里会对延迟消息做具体的逻辑。由于消息的消费是延迟的，从而变相实现了从消息发送那一刻起开始的定时任务。")]),s._v(" "),n("p",[s._v("在启动应用之前，还要需要做一些必要的配置，下面分消息生产端和消费端做说明：")]),s._v(" "),n("p",[n("strong",[s._v("消息生产端")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("spring.cloud.stream.bindings.example-topic-output.destination=delay-topic\nspring.cloud.stream.rabbit.bindings.example-topic-output.producer.delayed-exchange=true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("注意这里的一个新参数"),n("code",[s._v("spring.cloud.stream.rabbit.bindings.example-topic-output.producer.delayed-exchange")]),s._v("，用来开启延迟消息的功能，这样在创建exchange的时候，会将其设置为具有延迟特性的exchange，也就是用到上面我们安装的延迟消息插件的功能。")]),s._v(" "),n("p",[n("strong",[s._v("消息消费端")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("spring.cloud.stream.bindings.example-topic-input.destination=delay-topic\nspring.cloud.stream.bindings.example-topic-input.group=test\nspring.cloud.stream.rabbit.bindings.example-topic-input.consumer.delayed-exchange=true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("在消费端也一样，需要设置"),n("code",[s._v("spring.cloud.stream.rabbit.bindings.example-topic-output.producer.delayed-exchange=true")]),s._v("。如果该参数不设置，将会出现类似下面的错误：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ERROR 9340 --- [ 127.0.0.1:5672] o.s.a.r.c.CachingConnectionFactory       : Channel shutdown: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg 'type' for exchange 'delay-topic' in vhost '/': received 'topic' but current is ''x-delayed-message'', class-id=40, method-id=10)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("完成了上面配置之后，就可以启动应用，并尝试访问"),n("code",[s._v("localhost:8080/sendMessage?message=hello")]),s._v("接口来发送一个消息到MQ中了。此时可以看到类似下面的日志：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("2019-01-02 23:28:45.318  INFO 96164 --- [ctor-http-nio-3] c.d.s.TestApplication$TestController     : Send: hello\n2019-01-02 23:28:45.328  INFO 96164 --- [ctor-http-nio-3] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [localhost:5672]\n2019-01-02 23:28:45.333  INFO 96164 --- [ctor-http-nio-3] o.s.a.r.c.CachingConnectionFactory       : Created new connection: rabbitConnectionFactory.publisher#5c5f9a03:0/SimpleConnection@3278a728 [delegate=amqp://guest@127.0.0.1:5672/, localPort= 53536]\n2019-01-02 23:28:50.349  INFO 96164 --- [ay-topic.test-1] c.d.stream.TestApplication$TestListener  : Received: hello\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("从日志中可以看到，"),n("code",[s._v("Send: hello")]),s._v("和"),n("code",[s._v("Received: hello")]),s._v("两条输出之间间隔了5秒，符合我们上面编码设置的延迟时间。")]),s._v(" "),n("h2",{attrs:{id:"深入思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入思考"}},[s._v("#")]),s._v(" 深入思考")]),s._v(" "),n("p",[s._v("在代码层面已经完成了定时任务，那么我们如何查看延迟的消息数等信息呢？")]),s._v(" "),n("p",[s._v("此时，我们可以打开RabbitMQ的Web控制台，首先可以进入Exchanges页面，看看这个特殊exchange，具体如下：")]),s._v(" "),n("p",[n("a",{attrs:{href:"http://blog.didispace.com/images/pasted-137.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"http://blog.didispace.com/images/pasted-137.png",alt:"img"}}),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("可以看到，这个exchange的Type类型是"),n("code",[s._v("x-delayed-message")]),s._v("。点击该exchange的名称，进入详细页面，就可以看到更多具体信息了：")]),s._v(" "),n("p",[n("a",{attrs:{href:"http://blog.didispace.com/images/pasted-136.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"http://blog.didispace.com/images/pasted-136.png",alt:"img"}}),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=t.exports}}]);