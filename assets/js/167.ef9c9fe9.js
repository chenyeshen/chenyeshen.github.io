(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{802:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("我们知道，当微服务越来越来多的时候，仅仅是feign的http调用方式已经满足不了我们的使用场景了。这个时候系统就需要接入消息中间件了。相比较于传统的Spring项目、SpringBoot项目使用消息中间件的很多配置不同，SpringCloud Stream抽象了中间件产品的不同，在SpringCloud中你仅仅需要修改几行配置文件就可以灵活的切换中间件产品而不需要修改任何代码。")]),s._v(" "),a("p",[s._v("现在我们以SpringCloud Stream整合RabbitMQ为例来学习一下")]),s._v(" "),a("p",[s._v("Bindings — 声明输入和输出通道的接口集合。\nBinder — 消息中间件的实现，如Kafka或RabbitMQ\nChannel — 表示消息中间件和应用程序之间的通信管道\nStreamListeners — bean中的消息处理方法，在中间件的MessageConverter特定事件中进行对象序列化/反序列化之后，将在信道上的消息上自动调用消息处理方法。\nMessage Schemas — 用于消息的序列化和反序列化，这些模式可以静态读取或者动态加载，支持对象类型的演变。\n将消息发布到指定目的地是由发布订阅消息模式传递。发布者将消息分类为主题，每个主题由名称标识。订阅方对一个或多个主题表示兴趣。中间件过滤消息，将感兴趣的主题传递给订阅服务器。订阅方可以分组，消费者组是由组ID标识的一组订户或消费者，其中从主题或主题的分区中的消息以负载均衡的方式递送。")]),s._v(" "),a("h2",{attrs:{id:"创建生产者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建生产者"}},[s._v("#")]),s._v(" 创建生产者")]),s._v(" "),a("h3",{attrs:{id:"_1-引入依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-引入依赖"}},[s._v("#")]),s._v(" 1. 引入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n        </dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2-定义配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-定义配置文件"}},[s._v("#")]),s._v(" 2. 定义配置文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("spring:\n  cloud:\n    stream:\n      binders:\n        test:\n          type: rabbit\n          environment:\n            spring:\n              rabbitmq:\n                addresses: 10.0.20.132\n                port: 5672\n                username: root\n                password: root\n                virtual-host: /unicode-pay\n      bindings:\n        testOutPut:\n          destination: testRabbit\n          content-type: application/json\n          default-binder: test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("现在来解释一下这些配置的含义")]),s._v(" "),a("ol",[a("li",[s._v("binders： 这是一组binder的集合，这里配置了一个名为test的binder，这个binder中是包含了一个rabbit的连接信息")]),s._v(" "),a("li",[s._v("bindings：这是一组binding的集合，这里配置了一个名为testOutPut的binding，这个binding中配置了指向名test的binder下的一个交换机testRabbit。")]),s._v(" "),a("li",[s._v("扩展： 如果我们项目中不仅集成了rabbit还集成了kafka那么就可以新增一个类型为kafka的binder、如果项目中会使用多个交换机那么就使用多个binding，")])]),s._v(" "),a("h3",{attrs:{id:"_3-创建通道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建通道"}},[s._v("#")]),s._v(" 3.创建通道")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public interface  MqMessageSource {\n\n    String TEST_OUT_PUT = "testOutPut";\n\n    @Output(TEST_OUT_PUT)\n    MessageChannel testOutPut();\n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个通道的名字就是上方binding的名字")]),s._v(" "),a("h3",{attrs:{id:"_4-发送消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-发送消息"}},[s._v("#")]),s._v(" 4. 发送消息")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@EnableBinding(MqMessageSource.class)\npublic class MqMessageProducer {\n    @Autowired\n    @Output(MqMessageSource.TEST_OUT_PUT)\n    private MessageChannel channel;\n\n\n    public void sendMsg(String msg) {\n        channel.send(MessageBuilder.withPayload(msg).build());\n        System.err.println("消息发送成功："+msg);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这里就是使用上方的通道来发送到指定的交换机了。需要注意的是withPayload方法你可以传入任何类型的对象，但是需要实现序列化接口")]),s._v(" "),a("h3",{attrs:{id:"_5-创建测试接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-创建测试接口"}},[s._v("#")]),s._v(" 5. 创建测试接口")]),s._v(" "),a("p",[s._v("EnableBinding注解绑定的类默认是被Spring管理的，我们可以在controller中注入它")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Autowired\nprivate MqMessageProducer mqMessageProducer;\n\n@GetMapping(value = "/testMq")\npublic String testMq(@RequestParam("msg")String msg){\n    mqMessageProducer.sendMsg(msg);\n    return "发送成功";\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("生产者的代码到此已经完成了。")]),s._v(" "),a("h2",{attrs:{id:"创建消费者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建消费者"}},[s._v("#")]),s._v(" 创建消费者")]),s._v(" "),a("h3",{attrs:{id:"_1-引入依赖-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-引入依赖-2"}},[s._v("#")]),s._v(" 1. 引入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n        </dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2-定义配置文件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-定义配置文件-2"}},[s._v("#")]),s._v(" 2. 定义配置文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("spring:\n  cloud:\n    stream:\n      binders:\n        test:\n          type: rabbit\n          environment:\n            spring:\n              rabbitmq:\n                addresses: 10.0.20.132\n                port: 5672\n                username: root\n                password: root\n                virtual-host: /unicode-pay\n      bindings:\n        testInPut:\n          destination: testRabbit\n          content-type: application/json\n          default-binder: test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("这里与生产者唯一不同的地方就是testIntPut了，相信你已经明白了，它是binding的名字，也是通道与交换机绑定的关键")]),s._v(" "),a("h3",{attrs:{id:"_3-创建通道-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建通道-2"}},[s._v("#")]),s._v(" 3.创建通道")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public interface  MqMessageSource {\n\n    String TEST_IN_PUT = "testInPut";\n\n    @Input(TEST_IN_PUT)\n    SubscribableChannel testInPut();\n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_4-接受消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-接受消息"}},[s._v("#")]),s._v(" 4. 接受消息")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@EnableBinding(MqMessageSource.class)\npublic class MqMessageConsumer {\n    @StreamListener(MqMessageSource.TEST_IN_PUT)\n    public void messageInPut(Message<String> message) {\n        System.err.println(" 消息接收成功：" + message.getPayload());\n    }\n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个时候启动Eureka、消息生产者和消费者，然后调用生产者的接口应该就可以接受到来自mq的消息了。")])])}),[],!1,null,null,null);n.default=t.exports}}]);